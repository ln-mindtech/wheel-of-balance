{"version":3,"file":"static/js/622.1b0545a3.chunk.js","mappings":"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","sources":["routes/Reflection/index.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {Link, useNavigate} from 'react-router-dom';\nimport './reflection.css';\nimport {Button} from \"../../components/Button\";\nimport { useParams } from 'react-router-dom';\n\nimport APIService from \"../../service/APIService\";\nimport {Input} from \"../../components/Input\";\n\nimport arrowLeft from '../../images/arrow-alt-circle-left-solid.svg';\nimport arrowRight from '../../images/arrow-alt-circle-right-solid.svg';\nimport startReflectionsImage from \"../../images/winhuman.svg\";\nimport mixpanel from 'mixpanel-browser';\n\nconst Reflection = () => {\n    const { id } = useParams();\n    let history = useNavigate();\n\n    const [reflectionsData, setReflectionsData] = useState(null);\n    const [responseData, setResponseData] = useState(null);\n    const [answersData, setAnswersData] = useState(null);\n    const [questionIndex, setQuestionIndex] = useState(0);\n    const [nextQuestionIndex, setNextQuestionIndex] = useState(0);\n    const [pageIndex, setPageIndex] = useState(id);\n    const [isDataUpdated, setDataUpdated] = useState(false);\n\n    const defaultFormData = {\n        answer1: '',\n        answer2: '',\n        answer3: '',\n        answer4: '',\n        answer5: '',\n    };\n\n    const [formData, setFormData] = useState(defaultFormData);\n\n    useEffect(() => {\n        APIService.getReflectionQuestions(sessionStorage.getItem('id_participant'), pageIndex)\n            .then(response => {\n                setResponseData(response.data);\n                setQuestionIndex(nextQuestionIndex);\n            })\n            .catch(error => {\n                history(\"*\");\n                console.error('Error fetching data:', error);\n            });\n    }, [pageIndex]);\n\n    useEffect(() => {\n        APIService.getReflections(sessionStorage.getItem('id_participant'))\n            .then(response => {\n                setReflectionsData(response.data.reflections);\n            })\n            .catch(error => {\n                history(\"*\");\n                console.error('Error fetching data:', error);\n            });\n    }, []);\n\n    useEffect(() => {\n        if (responseData) {\n            setFormData(defaultFormData);\n                APIService.getReflectionQuestionsAnswers(sessionStorage.getItem('id_participant'))\n                    .then(response => {\n                        setAnswersData({...response.data.questions, ...answersData});\n                        const currentAnswer = response.data.questions[responseData.questions[questionIndex].id_reflection_question];\n                       setFormData(prevState => ({\n                           ...prevState,\n                           ...(currentAnswer.reduce((acc, item, index) => {\n                               acc[`answer${index + 1}`] = item.caption_reflections_answers\n                               return acc;\n                           }, {}))\n                       }))\n                    })\n                    .catch(error => {\n                        history(\"*\");\n                        console.error('Error fetching data:', error);\n                    });\n\n        }\n    }, [responseData]);\n\n    useEffect(() => {\n        if (answersData) {\n            const currentAnswer = answersData[responseData.questions[questionIndex].id_reflection_question];\n            setFormData(prevState => ({\n                ...prevState,\n                ...(currentAnswer.reduce((acc, item, index) => {\n                    acc[`answer${index + 1}`] = item.caption_reflections_answers\n                    return acc;\n                }, {}))\n            }))\n        }\n    }, [questionIndex,answersData]);\n\n    function getCurrentAnswersCount() {\n        let total = 0;\n        const currentAnswer = answersData[responseData.questions[questionIndex].id_reflection_question];\n        currentAnswer.map(function(element){\n            if (element.caption_reflections_answers) {\n                total = total + 1;\n            }\n        });\n        return total;\n    }\n\n    function getCurrentSphereAnswersCount() {\n        let total = 0;\n\n        for (const key in answersData) {\n            for (const qkey in answersData[key]) {\n                if (answersData[key][qkey].caption_reflections_answers &&\n                    answersData[key][qkey].id_life_sphere == responseData.questions[questionIndex].id_life_sphere\n                ) {\n                    total = total + 1;\n                }\n            }\n        }\n\n        return total;\n    }\n\n    function sendAnalytics(name) {\n        mixpanel.track(name, {\n            'Sphere': responseData.questions[questionIndex].name_life_sphere,\n            'Question': (questionIndex + 1),\n            'Reflections': getCurrentAnswersCount()\n        });\n    }\n\n    const pnChangeSphere = (id) => {\n        //counts previous answers before change sphere!\n        let answersCount = getCurrentSphereAnswersCount();\n\n        setPageIndex(id);\n        setFormData(defaultFormData);\n        setNextQuestionIndex(0);\n\n        mixpanel.track('Go to Sphere', {\n            'From': responseData.questions[questionIndex].name_life_sphere,\n            'To': reflectionsData[(id - 1)].name_life_sphere,\n            'Reflections': answersCount\n        });\n\n        onSaveReflections();\n\n        sendAnalytics('Reflection Next Button press');\n    };\n\n    const pnNextSphereClick = () => {\n        if (pageIndex >= reflectionsData.length) {\n            setPageIndex(1);\n        } else {\n            setPageIndex(parseInt(pageIndex) + 1);\n        }\n\n        onSaveReflections();\n\n        setFormData(defaultFormData);\n        setNextQuestionIndex(0);\n\n        sendAnalytics('Arrow RIGHT tracked');\n    }\n\n    const btnNextSphereClick = () => {\n        if (pageIndex >= reflectionsData.length) {\n            setPageIndex(1);\n        } else {\n            setPageIndex(parseInt(pageIndex) + 1);\n        }\n\n        onSaveReflections();\n\n        setFormData(defaultFormData);\n        setNextQuestionIndex(0);\n\n        sendAnalytics('Reflection Next Button press');\n    }\n\n    const pnPrevSphereClick = () => {\n        if (pageIndex == 1) {\n            setPageIndex(reflectionsData.length);\n        } else {\n            setPageIndex(parseInt(pageIndex) - 1);\n        }\n        setFormData(defaultFormData);\n        setNextQuestionIndex(3);\n\n        onSaveReflections();\n\n        sendAnalytics('Arrow LEFT tracked');\n    }\n\n    const pnNexPageClick = () => {\n        setFormData(defaultFormData);\n        setQuestionIndex(questionIndex + 1);\n\n        onSaveReflections();\n\n        sendAnalytics('Arrow RIGHT tracked');\n    }\n\n    const btnNextPageClick = () => {\n        setFormData(defaultFormData);\n        setQuestionIndex(questionIndex + 1);\n\n        onSaveReflections();\n\n        sendAnalytics('Reflection Next Button press');\n    }\n\n    const pnPrevPageClick = () => {\n        setFormData(defaultFormData);\n        setQuestionIndex(questionIndex - 1);\n\n        onSaveReflections();\n\n        sendAnalytics('Arrow LEFT tracked');\n    }\n\n    const onSaveReflections = () => {\n        if (isDataUpdated) {\n            APIService.saveReflections(sessionStorage.getItem('id_participant'), answersData)\n                .then(response => {\n                    setDataUpdated(false);\n                })\n                .catch(error => {\n                    console.error('Error fetching data:', error);\n                });\n        }\n    }\n\n    const onChangeFormData = (name, index) => (e) => {\n        const {value} = e.target;\n        setFormData(prevState => ({\n            ...prevState,\n            [name]: value,\n        }))\n\n        const id = responseData.questions[questionIndex].id_reflection_question;\n\n        answersData[id][index - 1] = {\n            'caption_reflections_answers': value,\n            'id_reflection_question': id,\n        };\n        setAnswersData(answersData);\n        setDataUpdated(true);\n    }\n\n    const saveReflectionRequest = () => {\n        sessionStorage.setItem('exported', '');\n        sendAnalytics('Save and Finish');\n        APIService.saveReflections(sessionStorage.getItem('id_participant'), answersData)\n            .then(response => {\n                history(\"/reflections/\");\n            })\n            .catch(error => {\n                console.error('Error fetching data:', error);\n            });\n    };\n\n    const renderPagerDotsItems = () => {\n        return Array.from({length: responseData.questions.length}, (_, index) => (\n            <div className={'dot-div'}>\n                {index > questionIndex ? (\n                    <span className={'dot-empty'} key={index}></span>\n                ) : (\n                    <span className={index == questionIndex ? 'dot-selected' : 'dot'} key={index}\n                          onClick={() => setQuestionIndex(index)}></span>\n                )}\n\n            </div>\n        ));\n    };\n\n    return (\n        <div>\n        {responseData ? (\n            <div>\n                <h1>\n                    {responseData.questions[questionIndex].name_life_sphere}\n                    <span>{responseData.questions[questionIndex].balance_wheels_mark}</span>\n                </h1>\n                <p>{responseData.questions[questionIndex].caption_reflection_question}</p>\n\n                <div className={'answer-div'}>\n                    <span>1.</span>\n                    <Input\n                        onchange={onChangeFormData('answer1', 1)}\n                        placeholder={'Your answer'}\n                        value={formData.answer1}\n                    />\n                </div>\n                <div className={'answer-div'}>\n                    <span>2.</span>\n                    <Input\n                        onchange={onChangeFormData('answer2', 2)}\n                        placeholder={'Your answer'}\n                        value={formData.answer2}\n                        disabled={!formData.answer1}\n                    />\n                </div>\n                <div className={'answer-div'}>\n                    <span>3.</span>\n                    <Input\n                        onchange={onChangeFormData('answer3', 3)}\n                        placeholder={'Your answer'}\n                        value={formData.answer3}\n                        disabled={!formData.answer2}\n                    />\n                </div>\n                <div className={'answer-div'}>\n                    <span>4.</span>\n                    <Input\n                        onchange={onChangeFormData('answer4', 4)}\n                        placeholder={'Your answer'}\n                        value={formData.answer4}\n                        disabled={!formData.answer3}\n                    />\n                </div>\n                <div className={'answer-div'}>\n                    <span>5.</span>\n                    <Input\n                        onchange={onChangeFormData('answer5', 5)}\n                        placeholder={'Your answer'}\n                        value={formData.answer5}\n                        disabled={!formData.answer4}\n                    />\n                </div>\n                <div>\n                    {questionIndex + 1 < responseData.questions.length && id ? (\n                        <Button\n                            text={'Next'}\n                            onclick={btnNextPageClick}\n                        />\n                    ) : (\n                        <Button\n                            text={'Next'}\n                            onclick={btnNextSphereClick}\n                        />\n                    )}\n                </div>\n\n                <div className={'dots-div'}>\n                    <div className={'left-div'}>\n                        {questionIndex > 0 ? (\n                            <img className={'left'} src={arrowLeft} onClick={pnPrevPageClick}/>\n                        ) : (\n                            <img className={'left'} src={arrowLeft} onClick={pnPrevSphereClick}/>\n                        )}\n                    </div>\n                    {renderPagerDotsItems()}\n                    <div className={'right-div'}>\n                        {questionIndex + 1 == responseData.questions.length ? (\n                            <img className={'right'} src={arrowRight} onClick={pnNextSphereClick}/>\n                        ) : (\n                            <img className={'right'} src={arrowRight} onClick={pnNexPageClick}/>\n                        )}\n                    </div>\n                </div>\n\n                <p className={'save-for-now-p'}>\n                    <a onClick={saveReflectionRequest}>Save and finish for now</a>\n                </p>\n                <div>\n                    {reflectionsData ? (\n                        <div id=\"reflections\" className={'reflection-progress-icons'}>\n                            {reflectionsData.map((reflection, index) => {\n                                return (\n                                    <div className={'reflection-progress-icon-div'}>\n                                        <p>{reflection.name_life_sphere}</p>\n                                        {(pageIndex == index + 1) ? (\n                                            <div className={'img-container-selected'}>\n                                                <img className={'reflection-progress-icon-w'}\n                                                     src={require('../../images/reflection/' + reflection.icon_name_life_sphere + '.png')}\n                                                />\n                                            </div>\n                                        ) : (\n                                            <div className={'img-container'}>\n                                                <img className={'reflection-progress-icon-w'} onClick={() => pnChangeSphere(reflection.id_life_sphere)}\n                                                     src={require('../../images/reflection/' + reflection.icon_name_life_sphere + '.png')}\n                                                />\n                                            </div>\n                                        )}\n                                    </div>\n                                );\n                            })}\n                        </div>\n                    ) : (\n                        <p>Loading data...</p>\n                    )}\n                </div>\n            </div>\n        ) : (\n        <p>Loading data...</p>\n        )}\n        </div>\n    );\n}\n\nexport default Reflection"],"names":["Reflection","id","useParams","history","useNavigate","reflectionsData","setReflectionsData","useState","responseData","setResponseData","answersData","setAnswersData","questionIndex","setQuestionIndex","nextQuestionIndex","setNextQuestionIndex","pageIndex","setPageIndex","isDataUpdated","setDataUpdated","defaultFormData","answer1","answer2","answer3","answer4","answer5","formData","setFormData","getCurrentAnswersCount","total","questions","id_reflection_question","map","element","caption_reflections_answers","sendAnalytics","name","mixpanel","name_life_sphere","useEffect","APIService","getReflectionQuestions","sessionStorage","getItem","then","response","data","catch","error","console","getReflections","reflections","getReflectionQuestionsAnswers","currentAnswer","prevState","reduce","acc","item","index","concat","pnChangeSphere","answersCount","key","qkey","id_life_sphere","getCurrentSphereAnswersCount","onSaveReflections","saveReflections","onChangeFormData","e","value","target","_jsx","children","_jsxs","balance_wheels_mark","caption_reflection_question","className","Input","onchange","placeholder","disabled","length","Button","text","onclick","btnNextPageClick","btnNextSphereClick","parseInt","src","arrowLeft","onClick","pnPrevPageClick","pnPrevSphereClick","Array","from","_","arrowRight","pnNextSphereClick","pnNexPageClick","saveReflectionRequest","setItem","reflection","require","icon_name_life_sphere"],"sourceRoot":""}