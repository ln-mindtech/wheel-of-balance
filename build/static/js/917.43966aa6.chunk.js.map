{"version":3,"file":"static/js/917.43966aa6.chunk.js","mappings":"2NAUA,MAiGA,EAjG6BA,KACzB,IAAIC,GAAUC,EAAAA,EAAAA,MAEd,MAAOC,EAAaC,IAAkBC,EAAAA,EAAAA,UAAS,KACxCC,EAAWC,IAAgBF,EAAAA,EAAAA,UAAS,OAE3CG,EAAAA,EAAAA,YAAU,KACNC,EAAAA,EAAWC,mCACNC,MAAKC,IACFL,EAAaK,EAASC,KAAKP,UAAU,IAExCQ,OAAMC,IACHd,EAAQ,KACRe,QAAQD,MAAM,uBAAwBA,EAAM,GAC9C,GACP,IAEH,MAAME,EAAoBC,GAAiBC,IACvC,MAAM,MAACC,GAASD,EAAEE,OAElBlB,EAAYe,GAAe,CACvB,MAASE,EACT,qBAAwBF,GAG5Bd,EAAeD,EAAY,EAiBzBmB,EAAqBC,GACI,YAAvBA,EAASC,YACFC,EAAAA,EAAAA,KAACC,EAAAA,EAAQ,CACZC,SAAUV,EAAiBM,EAASK,IACpCC,KAAMN,EAASK,GACfE,YAAa,cACbC,KAAM,KAIPN,EAAAA,EAAAA,KAACO,EAAAA,EAAK,CACTL,SAAUV,EAAiBM,EAASK,IACpCC,KAAMN,EAASK,GACfE,YAAa,gBAIrB,OACIG,EAAAA,EAAAA,MAAA,OAAKC,UAAW,yBAAyBC,SAAA,EACrCV,EAAAA,EAAAA,KAAA,MAAAU,SAAI,mHAGH7B,GACG2B,EAAAA,EAAAA,MAAA,OAAKC,UAAW,qBAAqBC,SAAA,CAChC7B,EAAU8B,KAAI,CAACb,EAAUc,KAElBJ,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACIV,EAAAA,EAAAA,KAAA,OAAKS,UAAW,oBAAoBC,UAChCV,EAAAA,EAAAA,KAAA,KAAAU,SAAIZ,EAASe,aAEjBb,EAAAA,EAAAA,KAAA,OAAKS,UAAW,kBAAkBC,SAC7Bb,EAAkBC,WAKnCU,EAAAA,EAAAA,MAAA,OAAKC,UAAW,mBAAmBC,SAAA,EAC/BV,EAAAA,EAAAA,KAAA,OAAKS,UAAW,uBAAuBC,UACnCV,EAAAA,EAAAA,KAACc,EAAAA,EAAM,CACHC,KAAM,OACNC,QAlDYC,KACpCjC,EAAAA,EAAWkC,gCAAgCC,eAAeC,QAAQ,kBAAmB1C,GAChFQ,MAAKC,IACFX,EAAQ,qBAAuB2C,eAAeC,QAAQ,oBAAoB,IAE7E/B,OAAMC,IACHC,QAAQD,MAAM,uBAAwBA,EAAM,GAC9C,OA8CUU,EAAAA,EAAAA,KAAA,OAAKS,UAAW,uBAAuBC,UACnCV,EAAAA,EAAAA,KAAA,KAAGqB,QA1DaC,KACpC9C,EAAQ,qBAAuB2C,eAAeC,QAAQ,oBAAoB,EAyDVV,SAAC,kBAKzDV,EAAAA,EAAAA,KAAA,KAAAU,SAAG,sBAEL,C","sources":["routes/FeedbackBalanceWheel/index.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {Link, useNavigate} from 'react-router-dom';\nimport {Button} from \"../../components/Button\";\n\nimport './index.css';\nimport APIService from \"../../service/APIService\";\nimport {Input} from \"../../components/Input\";\n\nimport {Textarea} from \"../../components/Textarea\";\n\nconst FeedbackBalanceWheel = () => {\n    let history = useNavigate();\n\n    const [answersData, setAnswersData] = useState([]);\n    const [questions, setQuestions] = useState(null);\n\n    useEffect(() => {\n        APIService.getFeedbackBalanceWheelQuestions()\n            .then(response => {\n                setQuestions(response.data.questions);\n            })\n            .catch(error => {\n                history(\"*\");\n                console.error('Error fetching data:', error);\n            });\n    }, []);\n\n    const onChangeFormData = (id_question) => (e) => {\n        const {value} = e.target;\n\n        answersData[id_question] = {\n            'value': value,\n            'id_feedback_question': id_question,\n        };\n\n        setAnswersData(answersData);\n    }\n\n    const skipFeedbackBalanceWheelRequest = () => {\n        history(\"/startReflections/\" + sessionStorage.getItem('hash_participant'));\n    }\n\n    const saveFeedbackBalanceWheelRequest = () => {\n        APIService.saveFeedbackBalanceWheelAnswers(sessionStorage.getItem('id_participant'), answersData)\n            .then(response => {\n                history(\"/startReflections/\" + sessionStorage.getItem('hash_participant'));\n            })\n            .catch(error => {\n                console.error('Error fetching data:', error);\n            });\n    };\n\n    const renderAnswerInput = (question) => {\n        if (question.input_type == 'textarea') {\n            return <Textarea\n                onchange={onChangeFormData(question.id)}\n                name={question.id}\n                placeholder={'Your answer'}\n                rows={6}\n            />\n        }\n\n        return <Input\n            onchange={onChangeFormData(question.id)}\n            name={question.id}\n            placeholder={'Your answer'}\n        />\n    }\n\n    return (\n        <div className={'feedback-balance-wheel'}>\n            <h2>\n                Please help us develop the product that will really make Your Life and the Lives of Thousands of Others better\n            </h2>\n            {questions ? (\n                <div className={'feedback-questions'}>\n                    {questions.map((question, index) => {\n                        return (\n                            <div>\n                                <div className={'feedback-question'}>\n                                    <p>{question.caption}</p>\n                                </div>\n                                <div className={'feedback-answer'}>\n                                    {renderAnswerInput(question)}\n                                </div>\n                            </div>\n                        );\n                    })}\n                    <div className={'feedback-buttons'}>\n                        <div className={'feedback-button-send'}>\n                            <Button\n                                text={'Send'}\n                                onclick={saveFeedbackBalanceWheelRequest}\n                            />\n                        </div>\n                        <div className={'feedback-button-skip'}>\n                            <a onClick={skipFeedbackBalanceWheelRequest}>Skip</a>\n                        </div>\n                    </div>\n                </div>\n            ) : (\n                <p>Loading data...</p>\n            )}\n        </div>\n    );\n}\n\nexport default FeedbackBalanceWheel"],"names":["FeedbackBalanceWheel","history","useNavigate","answersData","setAnswersData","useState","questions","setQuestions","useEffect","APIService","getFeedbackBalanceWheelQuestions","then","response","data","catch","error","console","onChangeFormData","id_question","e","value","target","renderAnswerInput","question","input_type","_jsx","Textarea","onchange","id","name","placeholder","rows","Input","_jsxs","className","children","map","index","caption","Button","text","onclick","saveFeedbackBalanceWheelRequest","saveFeedbackBalanceWheelAnswers","sessionStorage","getItem","onClick","skipFeedbackBalanceWheelRequest"],"sourceRoot":""}